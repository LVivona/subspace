diff --git a/pallets/subnet_emission/src/decryption.rs b/pallets/subnet_emission/src/decryption.rs
index 944a429d..4c9b2365 100644
--- a/pallets/subnet_emission/src/decryption.rs
+++ b/pallets/subnet_emission/src/decryption.rs
@@ -48,8 +48,9 @@ impl<T: Config> Pallet<T> {
                 continue;
             }
 
-            let encrypted_weights: Vec<Vec<u8>> =
-                EncryptedWeights::<T>::iter_prefix(netuid).map(|(_, value)| value).collect();
+            let encrypted_weights: Vec<Vec<u8>> = WeightEncryptionData::<T>::iter_prefix(netuid)
+                .map(|(_, value)| value.encrypted)
+                .collect();
 
             if encrypted_weights.is_empty() {
                 continue;
@@ -333,8 +334,8 @@ impl<T: Config> Pallet<T> {
         // Clear encrypted weights
         DecryptedWeights::<T>::remove(subnet_id);
 
-        // Clear hashes
-        let _ = DecryptedWeightHashes::<T>::clear_prefix(subnet_id, u32::MAX, None);
+        // Clear hashes & encrypted weights
+        let _ = WeightEncryptionData::<T>::clear_prefix(subnet_id, u32::MAX, None);
 
         // Clear ConsensusParameters and sum up token emission
         let current_block = pallet_subspace::Pallet::<T>::get_current_block_number();
diff --git a/pallets/subnet_emission/src/lib.rs b/pallets/subnet_emission/src/lib.rs
index 0c2b6a33..baa69dd1 100644
--- a/pallets/subnet_emission/src/lib.rs
+++ b/pallets/subnet_emission/src/lib.rs
@@ -42,6 +42,7 @@ pub mod pallet {
     use pallet_subnet_emission_api::SubnetConsensus;
     use pallet_subspace::TotalStake;
     use subnet_pricing::root::RootPricing;
+    use types::KeylessBlockWeights;
 
     const STORAGE_VERSION: StorageVersion = StorageVersion::new(1);
 
@@ -112,16 +113,18 @@ pub mod pallet {
     #[pallet::storage]
     pub type Weights<T> = StorageDoubleMap<_, Identity, u16, Identity, u16, Vec<(u16, u16)>>;
 
-    #[pallet::storage]
-    pub type EncryptedWeights<T> = StorageDoubleMap<_, Identity, u16, Identity, u16, Vec<u8>>;
+    #[derive(Encode, Decode, RuntimeDebug)]
+    pub struct EncryptionMechanism {
+        pub encrypted: Vec<u8>,
+        pub decrypted_hashes: Vec<u8>,
+    }
 
-    // TODO: refactor the `Vec<(u64, Vec<(u16, Vec<(u16, u16)>)>)>`
     #[pallet::storage]
-    pub type DecryptedWeights<T> =
-        StorageMap<_, Identity, u16, Vec<(u64, Vec<(u16, Vec<(u16, u16)>)>)>>;
+    pub type WeightEncryptionData<T> =
+        StorageDoubleMap<_, Identity, u16, Identity, u16, EncryptionMechanism>;
 
     #[pallet::storage]
-    pub type DecryptedWeightHashes<T> = StorageDoubleMap<_, Identity, u16, Identity, u16, Vec<u8>>;
+    pub type DecryptedWeights<T> = StorageMap<_, Identity, u16, Vec<KeylessBlockWeights>>;
 
     /// Decryption Node Info assigned to subnet
     #[pallet::storage]
diff --git a/pallets/subnet_emission/src/subnet_consensus/util/params.rs b/pallets/subnet_emission/src/subnet_consensus/util/params.rs
index 49adc0f8..435845e5 100644
--- a/pallets/subnet_emission/src/subnet_consensus/util/params.rs
+++ b/pallets/subnet_emission/src/subnet_consensus/util/params.rs
@@ -1,6 +1,6 @@
 use core::fmt::Debug;
 
-use crate::{Config, DecryptedWeightHashes, EncryptedWeights};
+use crate::{Config, WeightEncryptionData};
 use frame_support::DebugNoBound;
 use pallet_subspace::{
     math::*, AlphaValues, BalanceOf, Bonds, BondsMovingAverage, Founder, Kappa, Keys, LastUpdate,
diff --git a/tests/src/offworker/encryption.rs b/tests/src/offworker/encryption.rs
index 4597c5c6..93ddb354 100644
--- a/tests/src/offworker/encryption.rs
+++ b/tests/src/offworker/encryption.rs
@@ -1,8 +1,9 @@
 use ow_extensions::OffworkerExtension;
 use rand::rngs::OsRng;
 use rsa::{
-    pkcs1::{DecodeRsaPrivateKey, EncodeRsaPrivateKey}, traits::PublicKeyParts, BigUint, Pkcs1v15Encrypt, RsaPrivateKey,
-    RsaPublicKey,
+    pkcs1::{DecodeRsaPrivateKey, EncodeRsaPrivateKey},
+    traits::PublicKeyParts,
+    BigUint, Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey,
 };
 use sp_core::{sr25519, Pair};
 use sp_keystore::{testing::MemoryKeystore, Keystore};
@@ -234,9 +235,7 @@ fvRuW5JF+WZtGddyU4751JNNNhmwbwGmsmphy7EOHHaC
 -----END RSA PRIVATE KEY-----";
 
     let rsa_key = RsaPrivateKey::from_pkcs1_pem(rsa_key_pem).unwrap();
-    let mock_offworker_ext = MockOffworkerExt {
-        key: Some(rsa_key),
-    };
+    let mock_offworker_ext = MockOffworkerExt { key: Some(rsa_key) };
 
     println!("weights = {:?}", weights);
     println!("validator_key = {:?}", validator_key);
